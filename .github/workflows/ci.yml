# CI/CD Pipeline for Video Game Database
# Tests and deploys to Docker Hub

name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    environment: development
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Set up Docker Compose
      uses: ndeloof/install-compose-action@v0.0.1

    - name: Create env files
      run: |
        # Create root .env for docker-compose
        echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" > .env
        echo "AUTH_PORT=3000" >> .env
        echo "GAME_PORT=3001" >> .env
        echo "DISCORD_CLIENT_ID=${{ secrets.DISCORD_CLIENT_ID }}" >> .env
        echo "DISCORD_CLIENT_SECRET=${{ secrets.DISCORD_CLIENT_SECRET }}" >> .env
        echo "DISCORD_REDIRECT_URI=${{ secrets.DISCORD_REDIRECT_URI }}" >> .env
        echo "CLIENT_ID=${{ secrets.IGDB_CLIENT_ID }}" >> .env
        echo "CLIENT_SECRET=${{ secrets.IGDB_CLIENT_SECRET }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "FRONTEND_URL=http://localhost:5173" >> .env

    - name: Build and test
      run: |
        docker compose build
        docker compose up -d
        sleep 30  # Wait for services to start
        chmod +x test_api.sh
        ./test_api.sh
        docker compose down


  deploy:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      run: |
        docker compose build
        docker compose push 